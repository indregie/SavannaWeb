@using Savanna.Backend
@using Savanna.Frontend
@using Savanna.Backend.Actors
@using Savanna.Frontend.Interfaces

@{
    ViewBag.Title = "Savanna Game";
    IUIManager? uiManager = ViewData["UIManager"] as IUIManager;
    List<List<char>> board = uiManager?.GetGameBoard() ?? new List<List<char>>();
}

<h2>Welcome to Savanna!</h2>
<p>Please choose what you want to do:</p>

<div class="button-container">
    <form id="loadGameForm">
        <input id="loadGameButton" type="button" class="btn btn-primary" value="Load Game" />
    </form>
    <form id="newGameForm">
        <input id="newGameButton" type="button" class="btn btn-primary" value="New Game" />
    </form>
</div>

<div id="gameContent" class="hidden">
    <p>Loaded animals:</p>
    @foreach (var kvp in AnimalFactory.AnimalTypes)
    {
        <p>Enter @kvp.Key to add @kvp.Value.Name.</p>

    }

    <form id="saveGameForm">
        <input id="saveGameButton" type="button" value="Save Game" />
    </form>

    @* posts input to controller HandleInput action *@
    <form id="animalForm">
        <input id="animalSymbol" type="text" name="animalSymbol" maxlength="1" />
        <input id="addAnimalButton" type="submit" value="Add animal" />
    </form>

    <div id="game-board">
        <table>
            <p>Game board:</p>
            <tbody id="boardBody">
            </tbody>
        </table>
    </div>
</div>


<script>

    const updateBoard = async () => {

        const response = await fetch('@Url.Action("GetGameBoard", "Game")');
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log("responseData", data);
        const boardBody = document.getElementById('boardBody');
        boardBody.innerHTML = '';
        data.forEach((row, i) => {
            const tr = document.createElement('tr');;
            row.forEach((cell, j) => {
                const td = document.createElement('td');
                td.textContent = cell;
                tr.appendChild(td);
                console.log(cell);
            });
            boardBody.appendChild(tr);
        });
    }

    document.getElementById('addAnimalButton').addEventListener('click', async (event) => {
        event.preventDefault();
        console.log("listener alive");
        try {
            var animalSymbol = document.getElementById('animalSymbol').value.toUpperCase();
            const response = await fetch('@Url.Action("HandleInput", "Game")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ animalSymbol: animalSymbol })
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            console.log("response fetched");
        } catch (error) {
            console.error(error);
        }
    });

    document.getElementById('saveGameButton').addEventListener('click', async (event) => {
        event.preventDefault();
        try {
            const response = await fetch('@Url.Action("SaveGame", "Game")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ /* data for saving the game */ })
            });
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            console.log('Game saved succesfully');
        } catch (error) {
            console.error(error);
        }
    });

    document.getElementById('newGameButton').addEventListener('click', () => {
        document.getElementById('gameContent').classList.remove('hidden');
    });

    setInterval(updateBoard, 1000);
</script>
